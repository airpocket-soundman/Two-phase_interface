/*
  Copyright (c) 2019, miya
  Modified by airpocket, 2025
  All rights reserved.
  (BSD 2-Clause License)
*/

#include <MediaPlayer.h>
#include <OutputMixer.h>
#include <MemoryUtil.h>
#include <math.h>
#include <Adafruit_GFX.h>
#include <Adafruit_ILI9341.h>

// ======= ILI9341 SPI接続ピン定義 =======
#define TFT_CS   10   // Chip Select
#define TFT_DC   9    // Data/Command
#define TFT_RST  8    // Reset（必要なければ省略可）

Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC, TFT_RST);

const int MIXER_VOLUME = -160;
const int32_t S_BUFFER_SIZE = 8192;
uint8_t s_buffer[S_BUFFER_SIZE];
bool err_flag = false;

// ======= 波形パラメータ =======
const float SAMPLE_RATE = 48000.0f;
float freq = 440.0f;          // 初期周波数(Hz)
int volume = 50;              // 0〜100%
int amplitude = 0;            // 0〜32767
float phase = 0.0f;
const float PI2 = 6.2831853f;

// ======= Audio関連 =======
MediaPlayer *player;
OutputMixer *mixer;

// ======= 入力ピン設定 =======
const int POT_FREQ = A0;
const int POT_VOL  = A1;
const float FREQ_MIN = 1.0f;
const float FREQ_MAX = 1000.0f;
const int ADC_FREQ_MIN = 30;
const int ADC_FREQ_MAX = 610;
const int ADC_VOL_MIN  = 30;
const int ADC_VOL_MAX  = 610;

// ======= コールバック =======
static void error_callback(const ErrorAttentionParam *errparam)
{
  if (errparam->error_code > AS_ATTENTION_CODE_WARNING) {
    err_flag = true;
  }
}

static void mixer_done_callback(MsgQueId id, MsgType type, AsOutputMixDoneParam *param)
{
  return;
}

static void mixer_send_callback(int32_t id, bool is_end)
{
  AsRequestNextParam next;
  next.type = (!is_end) ? AsNextNormalRequest : AsNextStopResRequest;
  AS_RequestNextPlayerProcess(AS_PLAYER_ID_0, &next);
  return;
}

static bool player_done_callback(AsPlayerEvent event, uint32_t result, uint32_t sub_result)
{
  return true;
}

// ======= 波形生成 =======
void generate_sine(int16_t *buf, uint32_t frames)
{
  amplitude = (int)(32767.0f * (volume / 100.0f));
  float phase_inc = PI2 * freq / SAMPLE_RATE;
  for (uint32_t i = 0; i < frames; i++) {
    int16_t v = (int16_t)(sin(phase) * amplitude);
    buf[i * 2 + 0] = v;
    buf[i * 2 + 1] = v;
    phase += phase_inc;
    if (phase >= PI2) phase -= PI2;
  }
}

// ======= PCMコールバック =======
void player_decode_callback(AsPcmDataParam pcm_param)
{
  int16_t *buf = (int16_t*)pcm_param.mh.getPa();
  uint32_t frames = pcm_param.size / 4;
  generate_sine(buf, frames);
  mixer->sendData(OutputMixer0, mixer_send_callback, pcm_param);
}

// ======= 初期化 =======
void setup()
{
  Serial.begin(115200);

  // --- TFT 初期化 ---
  tft.begin();
  tft.setRotation(1); // 横向き
  tft.fillScreen(ILI9341_BLACK);
  tft.setTextColor(ILI9341_WHITE);
  tft.setTextSize(2);
  tft.setCursor(20, 20);
  tft.println("Spresense Sine Generator");
  tft.setTextSize(2);
  tft.setCursor(20, 50);
  tft.println("Initializing audio...");

  // --- Audio初期化 ---
  initMemoryPools();
  createStaticPools(MEM_LAYOUT_PLAYER);

  player = MediaPlayer::getInstance();
  mixer = OutputMixer::getInstance();

  player->begin();
  mixer->activateBaseband();

  player->create(MediaPlayer::Player0, error_callback);
  mixer->create(error_callback);
  player->activate(MediaPlayer::Player0, player_done_callback);
  mixer->activate(OutputMixer0, mixer_done_callback);

  usleep(100 * 1000);
  player->init(MediaPlayer::Player0, AS_CODECTYPE_WAV, "/mnt/sd0/BIN",
               AS_SAMPLINGRATE_48000, AS_BITLENGTH_16, AS_CHANNEL_STEREO);
  mixer->setVolume(MIXER_VOLUME, 0, 0);

  memset(s_buffer, 0, sizeof(s_buffer));
  player->writeFrames(MediaPlayer::Player0, s_buffer, S_BUFFER_SIZE);
  player->start(MediaPlayer::Player0, player_decode_callback);

  tft.fillScreen(ILI9341_BLACK);
  Serial.println("[OK] Audio initialized.");
}

// ======= メインループ =======
void loop()
{
  player->writeFrames(MediaPlayer::Player0, s_buffer, S_BUFFER_SIZE);

  // --- 周波数制御 ---
  int rawFreq = analogRead(POT_FREQ);
  if (rawFreq <= ADC_FREQ_MIN) freq = FREQ_MIN;
  else if (rawFreq >= ADC_FREQ_MAX) freq = FREQ_MAX;
  else freq = FREQ_MIN + (FREQ_MAX - FREQ_MIN) *
              ((float)(rawFreq - ADC_FREQ_MIN) / (ADC_FREQ_MAX - ADC_FREQ_MIN));

  // --- ボリューム制御 ---
  int rawVol = analogRead(POT_VOL);
  if (rawVol <= ADC_VOL_MIN) volume = 0;
  else if (rawVol >= ADC_VOL_MAX) volume = 100;
  else volume = (int)(100.0f * (float)(rawVol - ADC_VOL_MIN) / (ADC_VOL_MAX - ADC_VOL_MIN));

  // --- 表示更新 ---
  static unsigned long lastUpdate = 0;
  if (millis() - lastUpdate > 200) {
    lastUpdate = millis();

    // シリアル出力
    Serial.print("[A0]="); Serial.print(rawFreq);
    Serial.print("  [A1]="); Serial.print(rawVol);
    Serial.print("  ->  [freq]="); Serial.print(freq, 1);
    Serial.print(" Hz  [vol]="); Serial.print(volume);
    Serial.print("%  [amp]="); Serial.println(amplitude);

    // TFT出力
    tft.fillRect(0, 0, 320, 240, ILI9341_BLACK);
    tft.setCursor(20, 30);  tft.setTextSize(2);
    tft.println("Spresense Sine Generator");

    tft.setTextSize(2);
    tft.setCursor(20, 80);
    tft.printf("A0: %4d", rawFreq);
    tft.setCursor(20, 110);
    tft.printf("A1: %4d", rawVol);

    tft.setCursor(20, 150);
    tft.printf("Freq: %7.1f Hz", freq);

    tft.setCursor(20, 180);
    tft.printf("Vol:  %3d %%", volume);

    tft.setCursor(20, 210);
    tft.printf("Amp:  %5d", amplitude);
  }

  if (err_flag) {
    Serial.println("[ERROR] Audio system halted!");
    tft.fillScreen(ILI9341_RED);
    tft.setCursor(20, 120);
    tft.setTextColor(ILI9341_WHITE);
    tft.setTextSize(2);
    tft.println("AUDIO SYSTEM HALTED");
    player->stop(MediaPlayer::Player0);
    while (1);
  }

  usleep(1000);
}
