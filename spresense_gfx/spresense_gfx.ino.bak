/*
  Copyright (c) 2019, miya
  Modified by airpocket, 2025
  All rights reserved.
  (BSD 2-Clause License)
*/

#include <MediaPlayer.h>
#include <OutputMixer.h>
#include <MemoryUtil.h>
#include <math.h>
#include "lgfx_user.hpp"
#include <LovyanGFX.hpp>

LGFX lcd;
LGFX_Sprite spr(&lcd);

const int MIXER_VOLUME = -160;
const int32_t S_BUFFER_SIZE = 8192;
uint8_t s_buffer[S_BUFFER_SIZE];
bool err_flag = false;

const float SAMPLE_RATE = 48000.0f;
float freq = 440.0f;
int volume = 50;
float phase = 0.0f;
const float PI2 = 6.2831853f;

MediaPlayer *player;
OutputMixer *mixer;

const int POT_FREQ = A0;
const int POT_VOL  = A1;

const float FREQ_MIN = 1.0f;
const float FREQ_MAX = 1000.0f;

const int ADC_FREQ_MIN = 10;
const int ADC_FREQ_MAX = 620;
const int ADC_VOL_MIN  = 10;
const int ADC_VOL_MAX  = 620;

const int ADC_FREQ_MID = 238;   // 中央で500 Hzになるよう補正
const int ADC_VOL_MID  = 238;   // 中央で50 %になるよう補正

// gamma算出ヘルパ
static float calc_gamma(int mid, int minv, int maxv, float ymid)
{
  float t = (float)(mid - minv) / (float)(maxv - minv);
  if (t <= 0.0f) t = 1e-6f;
  if (t >= 1.0f) t = 1.0f - 1e-6f;
  return logf(ymid) / logf(t);
}

const float GAMMA_FREQ = calc_gamma(ADC_FREQ_MID, ADC_FREQ_MIN, ADC_FREQ_MAX, 0.5f);
const float GAMMA_VOL  = calc_gamma(ADC_VOL_MID, ADC_VOL_MIN, ADC_VOL_MAX, 0.5f);

static void error_callback(const ErrorAttentionParam *errparam)
{
  if (errparam->error_code > AS_ATTENTION_CODE_WARNING) err_flag = true;
}
static void mixer_done_callback(MsgQueId, MsgType, AsOutputMixDoneParam*) {}
static void mixer_send_callback(int32_t, bool is_end)
{
  AsRequestNextParam next;
  next.type = (!is_end) ? AsNextNormalRequest : AsNextStopResRequest;
  AS_RequestNextPlayerProcess(AS_PLAYER_ID_0, &next);
}
static bool player_done_callback(AsPlayerEvent, uint32_t, uint32_t){ return true; }

void generate_sine(int16_t *buf, uint32_t frames)
{
  int amplitude = (int)(32767.0f * (volume / 100.0f));
  float phase_inc = PI2 * freq / SAMPLE_RATE;
  for (uint32_t i = 0; i < frames; i++) {
    int16_t v = (int16_t)(sinf(phase) * amplitude);
    buf[i * 2 + 0] = v;
    buf[i * 2 + 1] = v;
    phase += phase_inc;
    if (phase >= PI2) phase -= PI2;
  }
}

void player_decode_callback(AsPcmDataParam pcm_param)
{
  int16_t *buf = (int16_t*)pcm_param.mh.getPa();
  uint32_t frames = pcm_param.size / 4;
  generate_sine(buf, frames);
  mixer->sendData(OutputMixer0, mixer_send_callback, pcm_param);
}

void setup()
{
  Serial.begin(115200);

  lcd.init();
  lcd.setRotation(1);
  lcd.fillScreen(TFT_BLACK);
  spr.createSprite(320, 24);
  spr.setTextColor(TFT_WHITE);
  spr.setFont(&fonts::Font0);
  spr.setTextSize(1);
  lcd.setCursor(10, 100);
  lcd.setTextSize(2);
  lcd.println("Initializing audio...");

  initMemoryPools();
  createStaticPools(MEM_LAYOUT_PLAYER);
  player = MediaPlayer::getInstance();
  mixer  = OutputMixer::getInstance();
  player->begin();
  mixer->activateBaseband();
  player->create(MediaPlayer::Player0, error_callback);
  mixer->create(error_callback);
  player->activate(MediaPlayer::Player0, player_done_callback);
  mixer->activate(OutputMixer0, mixer_done_callback);
  usleep(100 * 1000);

  player->init(MediaPlayer::Player0, AS_CODECTYPE_WAV, "/mnt/sd0/BIN",
               AS_SAMPLINGRATE_48000, AS_BITLENGTH_16, AS_CHANNEL_STEREO);
  mixer->setVolume(MIXER_VOLUME, 0, 0);
  memset(s_buffer, 0, sizeof(s_buffer));
  player->writeFrames(MediaPlayer::Player0, s_buffer, S_BUFFER_SIZE);
  player->start(MediaPlayer::Player0, player_decode_callback);
  lcd.fillScreen(TFT_BLACK);

  Serial.printf("[INFO] GAMMA_FREQ=%.3f, GAMMA_VOL=%.3f\n", GAMMA_FREQ, GAMMA_VOL);
}

void loop()
{
  player->writeFrames(MediaPlayer::Player0, s_buffer, S_BUFFER_SIZE);

  // --- 周波数制御（γ補正） ---
  int rawFreq = analogRead(POT_FREQ);
  if (rawFreq <= ADC_FREQ_MIN) freq = FREQ_MIN;
  else if (rawFreq >= ADC_FREQ_MAX) freq = FREQ_MAX;
  else {
    float t = (float)(rawFreq - ADC_FREQ_MIN) / (ADC_FREQ_MAX - ADC_FREQ_MIN);
    float t_corr = powf(t, GAMMA_FREQ);
    freq = FREQ_MIN + t_corr * (FREQ_MAX - FREQ_MIN);
  }

  // --- ボリューム制御（γ補正） ---
  int rawVol = analogRead(POT_VOL);
  if (rawVol <= ADC_VOL_MIN) volume = 0;
  else if (rawVol >= ADC_VOL_MAX) volume = 100;
  else {
    float t = (float)(rawVol - ADC_VOL_MIN) / (ADC_VOL_MAX - ADC_VOL_MIN);
    float t_corr = powf(t, GAMMA_VOL);
    volume = (int)(t_corr * 100.0f);
  }

  static unsigned long lastUpdate = 0;
  if (millis() - lastUpdate > 200) {
    lastUpdate = millis();
    Serial.printf("[A0]=%4d [A1]=%4d -> Freq:%7.1fHz Vol:%3d%%\n", rawFreq, rawVol, freq, volume);
    spr.fillSprite(TFT_BLACK);
    spr.setCursor(8, 4);
    spr.printf("Freq:%7.1fHz  Vol:%3d%%", freq, volume);
    spr.pushSprite(0, 0);
  }

  if (err_flag) {
    lcd.fillScreen(TFT_RED);
    lcd.setTextColor(TFT_WHITE);
    lcd.setTextSize(2);
    lcd.setCursor(40, 100);
    lcd.println("AUDIO SYSTEM HALTED");
    player->stop(MediaPlayer::Player0);
    while (1);
  }

  usleep(1000);
}

